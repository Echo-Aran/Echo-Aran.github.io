<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring常用注解</title>
    <link href="/2024/01/22/Spring%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
    <url>/2024/01/22/Spring%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="Spring部分"><a href="#Spring部分" class="headerlink" title="Spring部分"></a><strong>Spring部分</strong></h2><h4 id="1-声明bean的注解"><a href="#1-声明bean的注解" class="headerlink" title="1.声明bean的注解"></a>1.声明bean的注解</h4><p><strong>@Component</strong> 组件，没有明确的角色</p><p><strong>@Service</strong> 在业务逻辑层使用（service层）</p><p><strong>@Repository</strong>在数据访问层使用（dao层）</p><p><strong>@Controller</strong> 在展现层使用，控制器的声明（C）</p><h4 id="2-注入bean的注解"><a href="#2-注入bean的注解" class="headerlink" title="2.注入bean的注解"></a>2.注入bean的注解</h4><p>@Autowired：由Spring提供</p><p>@Inject：由JSR-330提供</p><p>@Resource：由JSR-250提供</p><p>都可以注解在set方法和属性上，推荐注解在属性上（一目了然，少写代码）。</p><h4 id="3-java配置类相关注解"><a href="#3-java配置类相关注解" class="headerlink" title="3.java配置类相关注解"></a>3.java配置类相关注解</h4><p>@Configuration 声明当前类为配置类，相当于xml形式的Spring配置（类上）</p><p>@Bean 注解在方法上，声明当前方法的返回值为一个bean，替代xml中的方式（方法上）</p><p>@Configuration 声明当前类为配置类，其中内部组合了@<a href="https://so.csdn.net/so/search?q=Component&spm=1001.2101.3001.7020">Component</a>注解，表明这个类是一个bean（类上）</p><p>@ComponentScan 用于对Component进行扫描，相当于xml中的（类上）</p><p>@WishlyConfiguration 为@Configuration与@ComponentScan的组合注解，可以替代这两个注解</p><h4 id="4-切面（AOP）相关注解"><a href="#4-切面（AOP）相关注解" class="headerlink" title="4.切面（AOP）相关注解"></a>4.切面（AOP）相关注解</h4><p>Spring支持AspectJ的注解式切面编程。</p><p><strong>@Aspect</strong> 声明一个切面（类上）<br>使用**@After、@Before、@Around**定义建言（advice），可直接将拦截规则（切点）作为参数。</p><p><strong>@After</strong> 在方法执行之后执行（方法上）<br><strong>@Before</strong>在方法执行之前执行（方法上）<br><strong>@Around</strong> 在方法执行之前与之后执行（方法上）</p><p><strong>@PointCut</strong> 声明切点<br>在java配置类中使用@EnableAspectJAutoProxy注解开启Spring对AspectJ代理的支持（类上）</p><h4 id="5-Bean的属性支持"><a href="#5-Bean的属性支持" class="headerlink" title="5.@Bean的属性支持"></a>5.@Bean的属性支持</h4><p><em><strong>*@Scope*</strong></em> 设置Spring容器如何新建Bean实例（方法上，得有@Bean）<br>其设置类型包括：</p><p>Singleton （单例,一个Spring容器中只有一个bean实例，默认模式）,<br>Protetype （每次调用新建一个bean）,<br>Request （web项目中，给每个http request新建一个bean）,<br>Session （web项目中，给每个http session新建一个bean）,<br>GlobalSession（给每一个 global http session新建一个Bean实例）</p><p><strong>@StepScope</strong> 在Spring Batch中还有涉及</p><p><strong>@PostConstruct</strong>由JSR-250提供，在构造函数执行完之后执行，等价于xml配置文件中bean的initMethod</p><p><strong>@PreDestory</strong> 由JSR-250提供，在Bean销毁之前执行，等价于xml配置文件中bean的destroyMethod</p><h4 id="6-Value注解"><a href="#6-Value注解" class="headerlink" title="6.@Value注解"></a>6.@Value注解</h4><p><strong>@Value</strong> 为属性注入值（属性上）<br>支持如下方式的注入：<br>》注入普通字符</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Value</span>(<span class="hljs-string">&quot;Michael Jackson&quot;</span>)<br><span class="hljs-title class_">String</span> name;<br></code></pre></td></tr></table></figure><p>》注入操作系统属性</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">#&#123;systemProperties[<span class="hljs-string">&#x27;os.name&#x27;</span>]&#125;</span>&quot;</span>)<br><span class="hljs-built_in">String</span> osName;<br></code></pre></td></tr></table></figure><p>》注入表达式结果</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">#&#123; T(java.lang.<span class="hljs-built_in">Math</span>).random() * <span class="hljs-number">100</span> &#125;</span>&quot;</span>)<br><span class="hljs-built_in">String</span> randomNumber;<br></code></pre></td></tr></table></figure><p>》注入其它bean属性</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">#&#123;domeClass.name&#125;</span>&quot;</span>)<br><span class="hljs-built_in">String</span> name;<br></code></pre></td></tr></table></figure><p>》注入文件资源</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Value</span>(<span class="hljs-string">&quot;classpath:com/hgs/hello/test.txt&quot;</span>)<br><span class="hljs-title class_">String</span> <span class="hljs-title class_">Resource</span> file;<br></code></pre></td></tr></table></figure><p>》注入网站资源</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Value(<span class="hljs-string">&quot;http://www.cznovel.com&quot;</span>)</span><br>Resource url;<br></code></pre></td></tr></table></figure><p>》<strong>注入配置文件</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;book.name&#125;</span>&quot;</span>)</span><br>String bookName;<br></code></pre></td></tr></table></figure><p>注入配置使用方法：<br>① 编写配置文件（test.properties）</p><p>book.name&#x3D;《三体》</p><p>② @PropertySource 加载配置文件(类上)</p><p>@PropertySource(“classpath:com&#x2F;hgs&#x2F;hello&#x2F;test&#x2F;test.propertie”)</p><p>③ 还需配置一个PropertySourcesPlaceholderConfigurer的bean。</p><h4 id="7-环境切换"><a href="#7-环境切换" class="headerlink" title="7.环境切换"></a>7.环境切换</h4><p>@Profile 通过设定Environment的ActiveProfiles来设定当前context需要使用的配置环境。（类或方法上）</p><p><em><strong>*@Conditional*</strong></em> Spring4中可以使用此注解定义条件话的bean，通过实现Condition接口，并重写matches方法，从而决定该bean是否被实例化。（方法上）</p><h4 id="8-异步相关"><a href="#8-异步相关" class="headerlink" title="8.异步相关"></a>8.异步相关</h4><p><strong>@EnableAsync</strong> 配置类中，通过此注解开启对异步任务的支持，叙事性AsyncConfigurer接口（类上）</p><p><strong>@Async</strong> 在实际执行的bean方法使用该注解来申明其是一个异步任务（方法上或类上<em>所有的方法都将异步</em>，需要@EnableAsync开启异步任务）</p><h4 id="9-定时任务相关"><a href="#9-定时任务相关" class="headerlink" title="9.定时任务相关"></a>9.定时任务相关</h4><p><strong>@EnableScheduling</strong> 在配置类上使用，开启计划任务的支持（类上）</p><p><strong>@Scheduled</strong> 来申明这是一个任务，包括cron,fixDelay,fixRate等类型（方法上，需先开启计划任务的支持）</p><h4 id="10-Enable注解说明"><a href="#10-Enable注解说明" class="headerlink" title="10.@Enable注解说明"></a>10.@Enable注解说明</h4><p>这些注解主要用来开启对xxx的支持。<br><strong>@EnableAspectJAutoProxy</strong> 开启对AspectJ自动代理的支持</p><p><strong>@EnableAsync</strong> 开启异步方法的支持</p><p><strong>@EnableScheduling</strong> 开启计划任务的支持</p><p><strong>@EnableWebMvc</strong> 开启Web MVC的配置支持</p><p><strong>@EnableConfigurationProperties</strong> 开启对@ConfigurationProperties注解配置Bean的支持</p><p><strong>@EnableJpaRepositories</strong> 开启对SpringData JPA Repository的支持</p><p><strong>@EnableTransactionManagement</strong> 开启注解式事务的支持</p><p><strong>@EnableTransactionManagement</strong> 开启注解式事务的支持</p><p><strong>@EnableCaching</strong> 开启注解式的缓存支持</p><p>11.测试相关注解</p><p><strong>@RunWith</strong> 运行器，Spring中通常用于对JUnit的支持</p><p><strong>@ContextConfiguration</strong> 用来加载配置ApplicationContext，其中classes属性用来加载配置类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(classes=&#123;TestConfig.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KjtTest</span> &#123;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(<span class="hljs-string">&quot;KjtTest&quot;</span>);<br> <br>    <span class="hljs-meta">@Autowired</span><br>    Service service;<br> <br> <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="SpringMVC部分"><a href="#SpringMVC部分" class="headerlink" title="SpringMVC部分"></a>SpringMVC部分</h3><p><strong>@EnableWebMvc</strong> 在配置类中开启Web MVC的配置支持，如一些ViewResolver或者MessageConverter等，若无此句，重写WebMvcConfigurerAdapter方法（用于对SpringMVC的配置）。</p><p><strong>@Controller</strong>声明该类为SpringMVC中的Controller</p><p><strong>@RequestMapping</strong> 用于映射Web请求，包括访问路径和参数（类或方法上）</p><p><strong>@ResponseBody</strong> 支持将返回值放在response内，而不是一个页面，通常用户返回json数据（返回值旁或方法上）</p><p><strong>@RequestBody</strong> 允许request的参数在request体中，而不是在直接连接在地址后面。（放在参数前）</p><p><strong>@PathVariable</strong> 用于接收路径参数，比如@RequestMapping(“&#x2F;hello&#x2F;{name}”)申明的路径，将注解放在参数中前，即可获取该值，通常作为Restful的接口实现方法。</p><p><strong>@RestController</strong> 该注解为一个组合注解，相当于@Controller和@ResponseBody的组合，注解在类上，意味着，该Controller的所有方法都默认加上了@ResponseBody。</p><p><strong>@ControllerAdvice</strong> 通过该注解，我们可以将对于控制器的全局配置放置在同一个位置，注解了@Controller的类的方法可使用@ExceptionHandler、@InitBinder、@ModelAttribute注解到方法上，<br>这对所有注解了 @RequestMapping的控制器内的方法有效。</p><p><strong>@ExceptionHandler</strong> 用于全局处理控制器里的异常</p><p><strong>@InitBinder</strong> 用来设置WebDataBinder，WebDataBinder用来自动绑定前台请求参数到Model中。</p><p><strong>@ModelAttribute</strong> 本来的作用是绑定键值对到Model里，在@ControllerAdvice中是让全局的@RequestMapping都能获得在此处设置的键值对。</p><p>如有遗漏或有误的地方，希望帮忙指出。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/01/22/hello-world/"/>
    <url>/2024/01/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
